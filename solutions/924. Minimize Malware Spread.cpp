924. Minimize Malware Spread
/*
mark the graph with color
cal the num of machines in the same color
cal num of infected machine in the same color
get the max_number and index
*/
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int row = graph.size();
        if(row == 0) return 0;
        int col = graph[0].size();
        vector<int> colors(row, -1);
        int c = 0;
        // mark the graph with color
        for(int i=0;i<graph.size();i++){
            if(colors[i]==-1){
                dfs(graph, i, c++, colors);
            }
        }
        // cal the num of machines in the same color
        vector<int> num_color(c, 0);
        for(int i=0;i<graph.size();i++){
            num_color[colors[i]]++;
        }
        // cal num of infected machine in the same color
        vector<int> infected_color(c, 0);
        for(int i=0;i<initial.size();i++){
            infected_color[colors[initial[i]]]++;
        }
        // get the max_number and index
        int max_num = 0;
        int index = INT_MAX;
        for(int i=0;i<initial.size();i++){
            int color = colors[initial[i]];
            if(infected_color[color]==1){
                if(num_color[color]>max_num){
                    index = initial[i];
                    max_num = num_color[color]; 
                } else if (num_color[color]==max_num && initial[i]<index){
                    index = initial[i];
                }
            }
        }
        if(index == INT_MAX){
            int res = INT_MAX;
            for(int i=0;i<initial.size();i++){
                res = min(res, initial[i]);
            }
            return res;
        } else {
            return index;
        }   
    }
    void dfs(vector<vector<int>>& graph, int i, int c, vector<int>& colors){
        colors[i] = c;
        for(int j=0;j<graph[i].size();j++){
            if(graph[i][j]==1&&colors[j]==-1){
                dfs(graph, j, c, colors);
            }
        }
    }
};